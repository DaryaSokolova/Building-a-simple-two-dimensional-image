#pragma once

namespace SokolovaTask2 {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	float giraffe[] = {
		//правая передняя нога и связь с туловищем
		2.f, 6.f, 2.5f, 5.5f, //связь с туловищем левая передняя
		2.5f, 5.5f, 3.f, 5.5f, //связь с туловищем правая передняя
		3.f, 5.5f, 3.5f, 5.f,
		3.5f, 5.f, 3.f, 1.5f, //правая нога справа
		3.f, 1.5f, 3.5f, 0.5f, //правая сторона щиколотки
		3.5f, 0.5f, 2.f, 0.5f, //стопа
		2.f, 0.5f, 2.5f, 1.5f, //левая сторона щиколотки
		2.5f, 1.5f, 2.5f, 5.5f, //левая сторона ноги
		//левая передняя нога
		2.5f, 5.5f, 2.f, 1.5f, //правая сторона ноги
		2.f, 1.5f, 2.f, 0.5f, //правая сторона щиколотки
		2.f, 0.5f, 0.5f, 0.5f, //левая стопа
		0.5f, 0.5f, 1.5f, 1.5f, //левая сторона щиколотки
		1.5f, 1.5f, 1.5f, 5.5f, //левая сторона
		1.5f, 5.5f, 1.f, 6.5f, //левая сторона до груди
		//(левая сторона) туловище и шея
		1.f, 6.5f, 1.5f, 7.5f, //верхняя сторона груди
		1.5f, 7.5f, 2.f, 8.f,
		2.f, 8.f, 2.5f, 10.5f, //левая сторона шеи
		2.5f, 10.5f, 2.5f, 12.17f, //левая сторона шеи

		2.5f, 12.17f, 3.5f, 12.5f, //соединитель
		//голова
		3.5f, 12.5f, 2.f, 12.f, //нижняя челюсть
		2.f, 12.f, 1.f, 12.5f, //от челюсти до носа
		1.f, 12.5f, 1.f, 13.f, //нос
		1.f, 13.f, 2.f, 13.5f, // от носа до глаз
		2.f, 13.5f, 2.f, 14.f, //рядом с глазами
		2.f, 14.f, 1.f, 13.5f, //нижняя часть уха
		1.f, 13.5f, 0.5f, 14.5f, //боковая часть уха
		0.5f, 14.5f, 1.5f, 14.5f, //верзняя часть уха
		1.5f, 14.5f, 2.f, 14.f, //правая часть левого уха
		2.f, 14.f, 2.5f, 14.5f, //левая сторона лба
		2.5f, 14.5f, 3.5f, 14.5f, //лоб
		3.5f, 14.5f, 4.f, 14.f, //правая сторона лба
		4.f, 14.f, 4.5f, 14.5f, //левая сторона правого уха
		4.5f, 14.5f, 5.5f, 14.5f, //врхняя сторона правого уха
		5.5f, 14.5f, 5.5f, 14.f, //правая сторона правого уха
		5.5f, 14.f, 4.5f, 13.5f, //нижняя правая сторона правого уха
		4.5f, 13.5f, 5.f, 13.f, //правая щека
		5.f, 13.f, 4.f, 12.f, //нижняя сторона правой щека

		//правая сторона шеи и туловища
		4.f, 12.f, 4.f, 8.f, //правая сторона шеи
		4.f, 8.f, 5.5f, 7.f, //верхняя сторона спины
		5.5f, 7.f, 6.5f, 6.5f, //средняя сторона спины
		6.5f, 6.5f, 7.f, 6.f,
		7.f, 6.f, 7.5f, 5.f, //нижняя сторона спины

		//хвост
		7.5f, 5.f, 8.f, 5.5f, //верхняя нижняя часть хвоста
		8.f, 5.5f, 8.f, 7.f, //
		8.f, 7.f, 8.5f, 7.5f, //полоска к кончику хвоста
		8.5f, 7.5f, 8.5f, 8.f, //верхняя нижняя часть кончика хвоста
		8.5f, 8.f, 9.5f, 8.5f, //верхняя часть кончика хвоста
		9.5f, 8.5f, 9.f, 7.5f, //нижняя часть кончика хвоста
		9.f, 7.5f, 8.5f, 7.5f, //нижняя часть кончика хвоста
		8.5f, 7.5f, 8.f, 7.f,//полоска к кончику хвоста
		8.f, 7.f, 8.5f, 5.f, //боковая сторона хвоста
		8.5f, 5.f, 7.5f, 4.5f, //нижняя сторона хвоста

		//задние ноги
		7.5f, 4.5f, 7.f, 3.f, //правая часть бедра
		7.f, 3.f, 7.5f, 2.f, //правая сторона над коленом
		7.5f, 2.f, 7.f, 1.f, //правая сторона под коленом
		7.f, 1.f, 7.5f, 0.5f, //правая сторона щиколотки
		7.5f, 0.5f, 5.5f, 0.5f, //стопа
		5.5f, 0.5f, 6.f, 1.5f, //левая щиколотка

		6.f, 1.5f, 5.5f, 1.5f, //верхняя сторона стопы левой ноги
		5.5f, 1.5f, 5.f, 0.5f, // левая сторона стопы левой ноги
		5.f, 0.5f, 5.5f, 0.5f, // нижняя сторона стопы левой ноги
		5.5f, 0.5f, 6.f, 1.5f, //левая щиколотка

		6.f, 1.5f, 6.5f, 2.f, //левая сторона под колненом левая нога
		6.5f, 2.f, 5.5f, 4.17f, //левая сторона над колненом левая нога

		//для единого связного рисунка
		5.5f, 4.17f, 6.5f, 2.f, //левая сторона над колненом левая нога
		6.5f, 2.f, 6.f, 1.5f, //левая сторона под колненом левая нога

		6.f, 1.5f, 6.5f, 1.5f, //верхняя часть стопы
		6.5f, 1.5f, 7.f, 2.f, //левая нижняя сторона колена
		7.f, 2.f, 6.f, 4.f, //левая сторона над коленом

		6.f, 4.f, 3.5f, 5.f, //живот

		//пятна
		2.5f, 11.5f, 3.f, 12.f, // верхняя девая сторона
		3.f, 12.f, 3.5f, 11.5f, // верхняя правая сторона
		3.5f, 11.5f, 3.f, 11.f, // нижняя левая сторона
		3.f, 11.f, 2.5f, 11.5f, // нижняя правая сторона

		4.f, 11.5f, 3.5f, 11.f, //верхняя часть пятна
		3.5f, 11.f, 3.5f, 10.5f, //левая сторона пятна
		3.5f, 10.5f, 4.f, 10.f, //нижняя часть пятна

		2.5f, 11.f, 3.f, 10.5f, //верхняя правая сторона пятна
		3.f, 10.5f, 2.5f, 10.5f, //нижняя сторона пятна

		4.f, 9.5f, 3.5f, 10.f, //правая стороан треуголбника
		3.5f, 10.f, 3.f, 9.5f, // левая сторона треугольника
		3.f, 9.5f, 4.f, 9.5f, //нижняя сторона треугольника

		4.f, 9.f, 3.f, 8.f, //верхняя левая сторона большлго углового треугольника
		3.f, 8.f, 4.f, 8.f, //нижняя сторона

		2.5f, 9.f, 3.f, 8.5f, //левая верхняя сторона маленького треугольника
		3.f, 8.5f, 2.5f, 8.5f, //нижняя сторона
		2.5f, 8.5f, 2.5f, 9.f, //правая верхняя сторона

		2.f, 8.f, 2.5f, 8.f, //верхняя сторона квадратика
		2.5f, 8.f, 2.5f, 7.5f, //правая тсорона
		2.5f, 7.5f, 2.f, 7.5f, //нижняя сторона
		2.f, 7.5f, 2.f, 8.f, //левая сторона

		2.5f, 7.f, 3.f, 7.5f, //левая верхняя сторона треугольника
		3.f, 7.5f, 3.f, 7.f, //правая сторона
		3.f, 7.f, 2.5f, 7.f, //нижняяя сторона

		3.5f, 7.f, 3.5f, 7.5f, //левая сторона квадратика
		3.5f, 7.5f, 4.f, 7.5f, //верхняя сторона
		4.f, 7.5f, 4.f, 7.f, //правая сторона
		4.f, 7.f, 3.5f, 7.f, //нижняя сторона

		3.5f, 6.f, 4.f, 6.5f, //верхняя левая сторона ромба
		4.f, 6.5f, 4.5f, 6.f, //верхняя правая сторона
		4.5f, 6.f, 4.f, 5.5f, //нижняя правая сторона
		4.f, 5.5f, 3.5f, 6.f, //нижняя левая сторона

		4.5f, 6.5f, 4.5f, 7.f, //верхняя левая сторона странной фигуры сапог
		4.5f, 7.f, 5.5f, 7.f, //верхняя сторона
		5.5f, 7.f, 5.5f, 6.f, //прравая сторона
		5.5f, 6.f, 5.f, 6.f, //нижняя сторона
		5.f, 6.f, 5.f, 6.5f, //нижняя левая
		5.f, 6.5f, 4.5f, 6.5f, //соединитель

		6.f, 6.5f, 6.5f, 6.5f, //верхняя сторона вертикального прямоугольника
		6.5f, 6.5f, 6.5f, 5.5f, //правая сторона
		6.5f, 5.5f, 6.f, 5.5f, //нижняя сторона
		6.f, 5.5f, 6.f, 6.5f, //левая сторона

		5.f, 5.5f, 5.5f, 5.5f, //верхняя сторона треугольничка
		5.5f, 5.5f, 5.f, 5.f, //правая сторона
		5.f, 5.f, 5.f, 5.5f, //левая сторона

		6.5f, 5.5f, 6.f, 4.f, //линия

		7.f, 4.5f, 7.f, 5.f, //левая сторона квадратика
		7.f, 5.f, 7.5f, 5.f, //верхняя сторона
		7.5f, 5.f, 7.5f, 4.5f, //правая сторона
		7.5f, 4.5f, 7.f, 4.5f, //нижняя сторона

		//глаза
		2.f, 13.5f, 2.5f, 14.f, //левая сторона левого глаза
		2.5f, 14.f, 2.5f, 13.5f, //правая сторона левого глаза
		2.5f, 13.5f, 2.f, 13.5f, //нижняя сторона

		3.f, 13.5f, 3.5f, 14.f, //левая сторона правого глаза
		3.5f, 14.f, 3.5f, 13.5f, //правая сторона
		3.5f, 13.5f, 3.f, 13.5f, //нижняя сторона

		0.f, 0.f, 0.f, 0.f
	};

	float rabbit[] = {
		// голова
		0.5f,3.f,1.f,4.5f, // от левой щеки вверх до уха
		1.f,4.5f,0.5f,6.f, // левое ухо слева снизу вверх
		0.5f,6.f,0.5f, 7.5f, // левое ухо слева
		0.5f, 7.5f,1.f,8.f, // левое ухо верх слева
		1.f,8.f,1.5f,8.f, // левое ухо верх середина
		1.5f,8.f,2.f,7.5f, // левое ухо верх справа
		2.f,7.5f,1.5f, 6.f, // левое ухо справа сверху вниз
		1.5f, 6.f,1.5f,4.5f, // левое ухо справа до макушки
		1.5f,4.5f,3.f,4.5f, // макушка
		3.f,4.5f,3.f,6.f, // правое ухо слева снизу вверх
		3.f,6.f,2.5f,7.5f, // правое ухо слева
		2.5f,7.5f,3.f,8.f, // правое ухо верх слева
		3.f,8.f,3.5f,8.f, // правое ухо верх середина
		3.5f,8.f,4.f,7.5f, // правое ухо верх справа
		4.f,7.5f,4.f,6.f, // правое ухо сверху вниз
		4.f,6.f,3.5f,4.5f, // правое ухо справа
		3.5f,4.5f,4.f,3.f, // от правого уха вниз до щеки
		4.f,3.f,3.5f,1.5f, // правая скула
		3.5f,1.5f,2.5f,1.f, // подбородок справа
		2.5f,1.f,2.f,1.f, // подбородок снизу
		2.f,1.f,1.f,1.5f, // подбородок слева
		1.f,1.5f,0.5f,3.f, // левая скула
		// туловище
		4.f,3.f,5.5f,3.5f, // спина от головы вправо
		5.5f,3.5f,7.f,3.5f, // спина верх
		7.f,3.5f,7.5f,2.5f, // спина сверху до хвоста
		7.5f,2.5f,8.f,2.5f, // хвост сверху
		8.f,2.5f,8.f,2.f, // хвост справа
		8.f,2.f,7.5f,2.f, // хвост низ справа налево
		7.5f,2.f,7.5f,0.5f, // задняя нога справа сверху вниз
		7.5f,0.5f,6.5f,0.5f, // задняя нога низ
		6.5f,0.5f,6.5f,1.f, // задняя нога слева
		6.5f,1.f,6.f,1.f, // между задних ног
		6.f,1.f,6.f,0.5f, // левая задняя нога справа
		6.f,0.5f,5.f,0.5f, // левая задняя нога низ
		5.f,0.5f,5.f,1.f, // левая задняя нога слева
		5.f,1.f,4.f,1.f, // между задними и передними ногами
		4.f,1.f,4.f,0.5f, // правая передняя нога справа
		4.f,0.5f,3.f,0.5f, // правая передняя нога низ
		3.f,0.5f,3.f,1.f, // правая передняя нога слева
		3.f,1.f,2.5f,1.f, // между передних ног
		2.5f,1.f,2.5f,0.5f, // передняя нога справа
		2.5f,0.5f,1.5f,0.5f, // передняя нога низ
		1.5f,0.5f,1.5f,1.25f, // передняя нога слева
		// левый глаз
		1.5f,3.5f,1.5f,3.f, // левый глаз слева сверху вниз
		1.5f,3.f,2.f,3.f, // левый глаз низ
		2.f, 3.f,2.f,3.5f, // левый глаз справа
		2.f,3.5f,1.5f,3.5f, // левый глаз верх
		// правый глаз
		2.5f,3.5f,2.5f,3.f, // правый глаз слева
		2.5f,3.f,3.f, 3.f, // правый глаз снизу
		3.f,3.f,3.f,3.5f, // правый глаз справа
		3.f,3.5f,2.5f,3.5f, // правый глаз сверху
		// ушные раковины
		1.f,5.5f,1.f,7.f, // левая ушная раковина
		3.5f,5.5f,3.5f,7.f, // правая ушная раковина
		// нос
		2.f,2.5f,2.5f,2.5f, // нос сверху
		2.5f,2.5f,2.25f,2.f, // нос справа
		2.25f,2.f,2.f,2.5f // нос слева
	};

	unsigned int arrayLengthRabbit = sizeof(rabbit) / sizeof(float);
	unsigned int arrayLengthGiraffe = sizeof(giraffe) / sizeof(float);

	////квадрат
	float VxRabbit = 8.5f; // размер рисунка по горизонтали
	float VyRabbit = 8.5f; // размер рисунка по вертикали
	float aspectFigRabbit = VxRabbit / VyRabbit; // соотношение сторон рисунка

	//вертикальный прямоугольник
	float VxGiraffe = 10.f; // размер рисунка по горизонтали
	float VyGiraffe = 15.f; // размер рисунка по вертикали
	float aspectFigGiraffe = VxGiraffe / VyGiraffe; // соотношение сторон рисунка

	/// <summary>
	/// Сводка для MyForm
	/// </summary>
	public ref class MyForm : public System::Windows::Forms::Form
	{
	public:
		MyForm(void)
		{
			InitializeComponent();
			//
			//TODO: добавьте код конструктора
			//
		}

	protected:
		/// <summary>
		/// Освободить все используемые ресурсы.
		/// </summary>
		~MyForm()
		{
			if (components)
			{
				delete components;
			}
		}

	private:
		/// <summary>
		/// Обязательная переменная конструктора.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Требуемый метод для поддержки конструктора — не изменяйте 
		/// содержимое этого метода с помощью редактора кода.
		/// </summary>
		void InitializeComponent(void)
		{
			this->SuspendLayout();
			// 
			// MyForm
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(284, 262);
			this->Name = L"MyForm";
			this->Text = L"MyForm";
			this->Load += gcnew System::EventHandler(this, &MyForm::MyForm_Load);
			this->Paint += gcnew System::Windows::Forms::PaintEventHandler(this, &MyForm::MyForm_Paint);
			this->KeyDown += gcnew System::Windows::Forms::KeyEventHandler(this, &MyForm::MyForm_KeyDown);
			this->Resize += gcnew System::EventHandler(this, &MyForm::MyForm_Resize);
			this->ResumeLayout(false);

		}
#pragma endregion
	private: bool keepAspectRatio; // значение - сохранять ли соотношение сторон рисунка?
	private: bool changeAnimals; // значение - сменить ли кролика на жирафа?


	private: System::Void MyForm_Paint(System::Object^ sender, System::Windows::Forms::PaintEventArgs^ e) {

		//float rabbit[] = {
		//	// голова
		//	0.5f,3.f,1.f,4.5f, // от левой щеки вверх до уха
		//	1.f,4.5f,0.5f,6.f, // левое ухо слева снизу вверх
		//	0.5f,6.f,0.5f, 7.5f, // левое ухо слева
		//	0.5f, 7.5f,1.f,8.f, // левое ухо верх слева
		//	1.f,8.f,1.5f,8.f, // левое ухо верх середина
		//	1.5f,8.f,2.f,7.5f, // левое ухо верх справа
		//	2.f,7.5f,1.5f, 6.f, // левое ухо справа сверху вниз
		//	1.5f, 6.f,1.5f,4.5f, // левое ухо справа до макушки
		//	1.5f,4.5f,3.f,4.5f, // макушка
		//	3.f,4.5f,3.f,6.f, // правое ухо слева снизу вверх
		//	3.f,6.f,2.5f,7.5f, // правое ухо слева
		//	2.5f,7.5f,3.f,8.f, // правое ухо верх слева
		//	3.f,8.f,3.5f,8.f, // правое ухо верх середина
		//	3.5f,8.f,4.f,7.5f, // правое ухо верх справа
		//	4.f,7.5f,4.f,6.f, // правое ухо сверху вниз
		//	4.f,6.f,3.5f,4.5f, // правое ухо справа
		//	3.5f,4.5f,4.f,3.f, // от правого уха вниз до щеки
		//	4.f,3.f,3.5f,1.5f, // правая скула
		//	3.5f,1.5f,2.5f,1.f, // подбородок справа
		//	2.5f,1.f,2.f,1.f, // подбородок снизу
		//	2.f,1.f,1.f,1.5f, // подбородок слева
		//	1.f,1.5f,0.5f,3.f, // левая скула
		//	// туловище
		//	4.f,3.f,5.5f,3.5f, // спина от головы вправо
		//	5.5f,3.5f,7.f,3.5f, // спина верх
		//	7.f,3.5f,7.5f,2.5f, // спина сверху до хвоста
		//	7.5f,2.5f,8.f,2.5f, // хвост сверху
		//	8.f,2.5f,8.f,2.f, // хвост справа
		//	8.f,2.f,7.5f,2.f, // хвост низ справа налево
		//	7.5f,2.f,7.5f,0.5f, // задняя нога справа сверху вниз
		//	7.5f,0.5f,6.5f,0.5f, // задняя нога низ
		//	6.5f,0.5f,6.5f,1.f, // задняя нога слева
		//	6.5f,1.f,6.f,1.f, // между задних ног
		//	6.f,1.f,6.f,0.5f, // левая задняя нога справа
		//	6.f,0.5f,5.f,0.5f, // левая задняя нога низ
		//	5.f,0.5f,5.f,1.f, // левая задняя нога слева
		//	5.f,1.f,4.f,1.f, // между задними и передними ногами
		//	4.f,1.f,4.f,0.5f, // правая передняя нога справа
		//	4.f,0.5f,3.f,0.5f, // правая передняя нога низ
		//	3.f,0.5f,3.f,1.f, // правая передняя нога слева
		//	3.f,1.f,2.5f,1.f, // между передних ног
		//	2.5f,1.f,2.5f,0.5f, // передняя нога справа
		//	2.5f,0.5f,1.5f,0.5f, // передняя нога низ
		//	1.5f,0.5f,1.5f,1.25f, // передняя нога слева
		//	// левый глаз
		//	1.5f,3.5f,1.5f,3.f, // левый глаз слева сверху вниз
		//	1.5f,3.f,2.f,3.f, // левый глаз низ
		//	2.f, 3.f,2.f,3.5f, // левый глаз справа
		//	2.f,3.5f,1.5f,3.5f, // левый глаз верх
		//	// правый глаз
		//	2.5f,3.5f,2.5f,3.f, // правый глаз слева
		//	2.5f,3.f,3.f, 3.f, // правый глаз снизу
		//	3.f,3.f,3.f,3.5f, // правый глаз справа
		//	3.f,3.5f,2.5f,3.5f, // правый глаз сверху
		//	// ушные раковины
		//	1.f,5.5f,1.f,7.f, // левая ушная раковина
		//	3.5f,5.5f,3.5f,7.f, // правая ушная раковина
		//	// нос
		//	2.f,2.5f,2.5f,2.5f, // нос сверху
		//	2.5f,2.5f,2.25f,2.f, // нос справа
		//	2.25f,2.f,2.f,2.5f // нос слева
		//};

		//unsigned int arrayLengthRabbit = sizeof(rabbit) / sizeof(float);

		////квадрат
		//float VxRabbit = 8.5f; // размер рисунка по горизонтали
		//float VyRabbit = 8.5f; // размер рисунка по вертикали
		//float aspectFigRabbit = VxRabbit / VyRabbit; // соотношение сторон рисунка

		Graphics^ g = e->Graphics;
		g->Clear(Color::Aquamarine);

		Pen^ blackPen = gcnew Pen(Color::Black, 2);

		float Wx = ClientRectangle.Width; // размер окна по горизонтали
		float Wy = ClientRectangle.Height; // размер окна по вертикали

		float aspectForm = Wx / Wy; // соотношение сторон окна рисования
		float Sx, Sy;
		if (keepAspectRatio) { // коэффициенты увеличения при сохранении исходного соотношения сторон
			if (changeAnimals)
			{
				Sx = Sy = aspectFigRabbit < aspectForm ? Wy / VyRabbit : Wx / VxRabbit;
			}
			else
			{
				Sx = Sy = aspectFigGiraffe < aspectForm ? Wy / VyGiraffe : Wx / VxGiraffe;
			}
		}
		else {
			if (changeAnimals)
			{
				Sx = Wx / VxRabbit; // коэффициент увеличения по оси Ox
				Sy = Wy / VyRabbit; // коэффициент увеличения по оси Oy
			}
			else
			{
				Sx = Wx / VxGiraffe; // коэффициент увеличения по оси Ox
				Sy = Wy / VyGiraffe; // коэффициент увеличения по оси Oy
			}

		}

		if (changeAnimals)
		{
			float Ty = Sy * VyRabbit; // смещение в положительную сторону по оси Oy после смены знака
			for (int i = 0; i < arrayLengthRabbit; i += 4)
			{
				g->DrawLine(blackPen, Sx * rabbit[i], Ty - Sy * rabbit[i + 1], Sx * rabbit[i + 2], Ty - Sy * rabbit[i + 3]);

			}
		}
		else
		{
			float Ty = Sy * VyGiraffe; // смещение в положительную сторону по оси Oy после смены знака
			for (int i = 0; i < arrayLengthGiraffe; i += 4)
			{
				g->DrawLine(blackPen, Sx * giraffe[i], Ty - Sy * giraffe[i + 1], Sx * giraffe[i + 2], Ty - Sy * giraffe[i + 3]);

			}
		}
	}
	
	private: System::Void MyForm_Resize(System::Object^ sender, System::EventArgs^ e) {
		Refresh();
	}


	private: System::Void MyForm_Load(System::Object^ sender, System::EventArgs^ e) {
		changeAnimals = true; //начальное состояние: зайчик
		keepAspectRatio = true; // начальное значение: сохранять соотношение сторон рисунка
	}

	private: System::Void MyForm_KeyDown(System::Object^ sender, System::Windows::Forms::KeyEventArgs^ e) {
		switch (e->KeyCode) {
		case Keys::M:
			keepAspectRatio = !keepAspectRatio;
			break;
		case Keys::N:
			changeAnimals = !changeAnimals;
			break;
		default:
			break;
		}

		Refresh();
	}
};
}
